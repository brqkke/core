// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("OLD_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum TokenStatus {
    ACTIVE
    NEED_REFRESH_RETRY
    BROKEN
}

model Token {
  id           Int    @id @default(autoincrement())
  user         User   @relation(fields: [userId], references: [id])
  userId       Int    @unique
  accessToken  String
  refreshToken String
  status TokenStatus @default(ACTIVE)
  lastRefreshedAt DateTime?
  lastRefreshTriedAt DateTime?
  refreshTriesCount Int @default(0)
}

model Session {
  id       Int    @id @default(autoincrement())
  expireAt Int
  token    String
  user     User   @relation(fields: [userId], references: [id])
  userId   Int
}

enum UserStatus {
    ACTIVE
    TO_DISABLE
    DISABLED
}

model User {
  id               Int       @id @default(autoincrement())
  email            String    @unique
  tempCode         String?
  tempCodeExpireAt Int
  token            Token?
  sessions         Session[]
  orders           Order[]
  status UserStatus @default(ACTIVE)
  locale String @default("en")
}

enum OrderStatus {
  TO_CANCEL
  OPEN
  FILLED
  FILLED_NEED_RENEW
  CANCELLED_NEED_RENEW
  CANCELLED
}

enum Currency {
  CHF
  EUR
}

model Order {
  id              Int         @id @default(autoincrement())
  remoteId        String      @unique
  transferLabel   String
  status          OrderStatus
  user            User        @relation(fields: [userId], references: [id])
  userId          Int
  createdAt       DateTime
  updatedAt       DateTime
  lastCheckedAt   DateTime
  previousOrder   Order?      @relation(fields: [previousOrderId], references: [id], name:"OrderToOrder")
  previousOrderId Int?
  renewedByOrders           Order[]     @relation("OrderToOrder")
  amount Int
  currency Currency
  bankDetails String?
  redactedCryptoAddress String?
}

model Task {
    id Int @id @default(autoincrement())
    name String @unique
    lastRunAt DateTime
}

enum TokenLogType {
    BROKEN_TOKEN
}

model TokenLogs {
    id Int @id @default(autoincrement())
    type TokenLogType
    data Int
    createdAt DateTime
}
