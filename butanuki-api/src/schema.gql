# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Vault {
  id: String!
  name: String!
  currency: OrderCurrency!
  createdAt: DateTime!
  userId: String!
  orderTemplates: [OrderTemplate!]!
  statistics: VaultStatistics!
  bitcoinPrice: Float
}

enum OrderCurrency {
  CHF
  EUR
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type OrderTemplate {
  id: ID!
  name: String!
  vaultId: ID!
  amount: Float!
  frequency: OrderFrequency!
  activeOrder: Order
  vault: Vault!
}

enum OrderFrequency {
  WEEKLY
  MONTHLY
}

type BityPaymentDetails {
  iban: String
  swift_bic: String
  recipient: String
  account_number: String
  bank_code: String
  bank_address: String
}

type Order {
  id: String!
  transferLabel: String!
  status: OrderStatus!
  orderTemplateId: String
  amount: Float!
  filledAmount: Float
  currency: OrderCurrency!
  redactedCryptoAddress: String
  bankDetails: BityPaymentDetails
}

enum OrderStatus {
  TO_CANCEL
  OPEN
  FILLED
  FILLED_NEED_RENEW
  CANCELLED_NEED_RENEW
  CANCELLED
}

type User {
  id: ID!
  email: String!
  locale: String!
  bityTokenStatus: BityLinkStatus!
  vaults: [Vault!]!
}

type BityLinkStatus {
  linked: Boolean!
  linkStatus: TokenStatus
}

enum TokenStatus {
  ACTIVE
  NEED_REFRESH_RETRY
  BROKEN
}

type VaultStatistics {
  totalSpent: Float!
  totalReceived: Float!
}

type EstimatorResult {
  averageBtcPrice: Float
  transactionCount: Int!
}

type DCAConfig {
  slug: String!
  type: ItemType!
  emojis: String!
  interval: DCAInterval!
  price: Float!
}

enum ItemType {
  CIGARETTES
  COFFEE
  BEER
  FASTFOOD
  OTHER
}

enum DCAInterval {
  DAILY
  WEEKLY
  MONTHLY
}

type Query {
  linkUrl: String!
  orderTemplate(id: ID!): OrderTemplate!
  currentPrice(currency: OrderCurrency!): Float!
  vault(id: ID!): Vault!
  me: User!
  errors: [ErrorType!]!
  averageCostEstimator(currency: OrderCurrency!, start: String!, end: String!, interval: DCAInterval!): EstimatorResult!
  dcaEstimatorConfigs: [DCAConfig!]!
}

"""Error type"""
enum ErrorType {
  NeedVerifiedBityAccount
  CantRefreshBityToken
  ButanukiAccountPreviouslyLinkedToOtherBityAccount
  UnknownBityError
  Unknown
  TooManyOrdersInVault
  TooManyVaults
}

type Mutation {
  unlinkBity: User!
  linkBity(redirectedFrom: String!): User!
  updateOrderTemplate(data: OrderInput!, orderTemplateId: ID!): OrderTemplate!
  createOrder(vaultId: ID!, data: CreateOrderInput!): OrderTemplate!
  deleteOrderTemplate(orderTemplateId: ID!): OrderTemplate!
  addVault(data: VaultInput!): Vault!
  updateVault(id: ID!, data: UpdateVaultInput!): Vault!
  deleteVault(vaultId: ID!): Vault!
  updateLocale(locale: String!): User!
}

input OrderInput {
  amount: Int!
  cryptoAddress: String
  name: String
  frequency: OrderFrequency!
}

input CreateOrderInput {
  amount: Int!
  cryptoAddress: String
  name: String
  frequency: OrderFrequency!
}

input VaultInput {
  name: String!
  currency: OrderCurrency!
}

input UpdateVaultInput {
  name: String!
}